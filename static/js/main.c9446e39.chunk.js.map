{"version":3,"sources":["components/mail/styles.js","services/api.js","components/mail/Mail.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","Title","h1","Message","props","error","success","api","axios","create","baseURL","sendMail","mail","a","post","response","Mail","useState","mailError","setMailError","mailSuccess","setMailSuccess","setTimeout","onSubmit","reset","name","type","placeholder","autoComplete","required","rows","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"wuDAEO,IAAMA,EAAYC,IAAOC,IAAV,KAuDTC,EAAQF,IAAOG,GAAV,KAOLC,EAAUJ,IAAOC,IAAV,KACJ,SAAAI,GAAK,OAChBA,EAAMC,MAAQ,UAAY,MAAQD,EAAME,QAAU,UAAY,OAUtD,SAAAF,GAAK,OAAKA,EAAMC,OAASD,EAAME,QAAU,IAAM,O,QC1EtDC,E,OAAMC,EAAMC,OAAO,CACvBC,QAAS,gDAGEC,EAAQ,uCAAG,WAAMC,GAAN,eAAAC,EAAA,sEACCN,EAAIO,KAAK,QAASF,GADnB,cAChBG,EADgB,yBAEfA,GAFe,2CAAH,sDCAN,SAASC,IAAQ,IAAD,EACKC,oBAAS,GADd,mBACtBC,EADsB,KACXC,EADW,OAESF,oBAAS,GAFlB,mBAEtBG,EAFsB,KAETC,EAFS,iDAI7B,WAA4BT,GAA5B,SAAAC,EAAA,+EAEUF,EAASC,GAFnB,OAGIS,GAAe,GACfC,YAAW,WACTD,GAAe,KACd,KANP,gDAQIF,GAAa,GACbG,YAAW,WACTH,GAAa,KACZ,KAXP,0DAJ6B,sBAmB7B,OACE,kBAACrB,EAAD,KACE,kBAACG,EAAD,gCACA,kBAACE,EAAD,CAASE,MAAOa,EAAWZ,QAASc,GACjCF,EAAY,wBAA0B,GACtCE,EAAc,eAAiB,IAGlC,kBAAC,IAAD,CAAMG,SA3BmB,4CA2BKC,OAAO,GACnC,kBAAC,IAAD,CACEC,KAAK,OACLC,KAAK,OACLC,YAAY,sCACZC,aAAa,MACbC,UAAQ,IAEV,kBAAC,IAAD,CACEJ,KAAK,KACLC,KAAK,QACLC,YAAY,2BACZC,aAAa,MACbC,UAAQ,IAEV,kBAAC,IAAD,CACEJ,KAAK,UACLC,KAAK,OACLC,YAAY,6BACZC,aAAa,MACbC,UAAQ,IAGV,kBAAC,IAAD,CACEJ,KAAK,OACLE,YAAY,UACZC,aAAa,MACbE,KAAK,KACLD,UAAQ,IAGV,4BAAQH,KAAK,UAAb,gB,4WC5DR,IAAMK,EAAcC,YAAH,KAoBFC,MATf,WACE,OACE,oCACE,kBAACF,EAAD,MACA,kBAACf,EAAD,QCPckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACL6C,QAAQ7C,MAAMA,EAAM8C,c","file":"static/js/main.c9446e39.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nexport const Container = styled.div`\n  width: 100%;\n  max-width: 660px;\n  margin: 0 auto;\n  margin-top: 10vh;\n  form {\n    display: flex;\n    flex-direction: column;\n  }\n\n  input,\n  textarea {\n    -webkit-box-shadow: inset 1px 0px 8px 0px rgba(164, 183, 214, 1);\n    box-shadow: inset 1px 0px 8px 0px rgba(164, 183, 214, 1);\n    border-radius: 30px;\n    background: rgb(223, 234, 253);\n    padding: 15px 30px;\n    margin-bottom: 20px;\n    font-size: 16px;\n    color: #000;\n    border: none;\n    transition: 200ms;\n\n    &:valid {\n      background: #fff;\n    }\n\n    &::placeholder {\n      color: rgba(0, 0, 0, 0.2);\n    }\n\n    &:focus {\n      background: #fff;\n      outline: none;\n    }\n  }\n\n  button {\n    cursor: pointer;\n    box-shadow: 1px 0px 8px 0px rgba(164, 183, 214, 1);\n    border-radius: 30px;\n    background: #fff;\n    padding: 15px 30px;\n    margin-bottom: 20px;\n    font-size: 16px;\n    color: #000;\n    border: none;\n    font-weight: 600;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`\n\nexport const Title = styled.h1`\n  font-size: 45px;\n  font-weight: 900;\n  margin: 0;\n  margin-bottom: 30px;\n`\n\nexport const Message = styled.div`\n  background: ${props =>\n    (props.error ? \"#f36453\" : \"\") || (props.success ? \"#16C72E\" : \"\")};\n  color: #fff;\n  font-size: 14px;\n  text-align: center;\n  padding: 20px 0;\n  font-weight: bold;\n  width: 100%;\n  position: absolute;\n  left: 0;\n  bottom: 0%;\n  opacity: ${props => (props.error || props.success ? \"1\" : \"0\")};\n  transition: all 300ms;\n`\n","import axios from \"axios\"\n\nconst api = axios.create({\n  baseURL: \"https://codechallenge-backend.herokuapp.com\"\n})\n\nexport const sendMail = async mail => {\n  const response = await api.post(\"/mail\", mail)\n  return response\n}\n\nexport default api\n","import React, { useState } from \"react\"\nimport { Form, Input, Textarea } from \"ninti\"\n\nimport { Container, Title, Message } from \"./styles\"\nimport { sendMail } from \"../../services/api\"\n\nexport default function Mail() {\n  const [mailError, setMailError] = useState(false)\n  const [mailSuccess, setMailSuccess] = useState(false)\n\n  async function handleSubmit(mail) {\n    try {\n      await sendMail(mail)\n      setMailSuccess(true)\n      setTimeout(() => {\n        setMailSuccess(false)\n      }, 2000)\n    } catch (err) {\n      setMailError(true)\n      setTimeout(() => {\n        setMailError(false)\n      }, 2000)\n    }\n  }\n\n  return (\n    <Container>\n      <Title>Easy way to send email!</Title>\n      <Message error={mailError} success={mailSuccess}>\n        {mailError ? \"Something went wrong!\" : \"\"}\n        {mailSuccess ? \"E-mail sent!\" : \"\"}\n      </Message>\n\n      <Form onSubmit={handleSubmit} reset={true}>\n        <Input\n          name=\"from\"\n          type=\"text\"\n          placeholder=\"From: Matheus <wolfzera@icloud.com>\"\n          autoComplete=\"off\"\n          required\n        />\n        <Input\n          name=\"to\"\n          type=\"email\"\n          placeholder=\"To: hireme@thetacode.com\"\n          autoComplete=\"off\"\n          required\n        />\n        <Input\n          name=\"subject\"\n          type=\"text\"\n          placeholder=\"Subject: <CodeChallenge />\"\n          autoComplete=\"off\"\n          required\n        />\n\n        <Textarea\n          name=\"text\"\n          placeholder=\"Message\"\n          autoComplete=\"off\"\n          rows=\"10\"\n          required\n        />\n\n        <button type=\"submit\">send email</button>\n      </Form>\n    </Container>\n  )\n}\n","import React from \"react\"\nimport Mail from \"./components/mail/Mail\"\nimport { createGlobalStyle } from \"styled-components\"\n\nconst GlobalStyle = createGlobalStyle`\n \n  body {\n    font-family: 'Nanum Gothic';\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    background: rgb(223,234,253);\n    background: linear-gradient(180deg, rgba(223,234,253,1) 0%, rgba(243,248,255,1) 100%) no-repeat;\n    height: 100vh; \n  }\n`\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <Mail />\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}